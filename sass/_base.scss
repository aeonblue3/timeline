@charset "UTF-8";

@import 'settings';
@import 'colors';
@import 'fonts';

@mixin container() {
  *zoom: 1;
  max-width: $container-width;
  width: 100%;
  _width: $container-width;
  margin-left: auto;
  margin-right: auto;
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@function get-grid-width() {
  @return 100;
}

@function gutterCalc() {
  @return percentage(($default-gutter / $container-width));
}

@function calcOneCol() {
  @return percentage((1 / $default-columns)) - gutterCalc();
}

@function calculateWidthPercentage($cols) {
  @return (($cols * calcOneCol()) + (gutterCalc() * ($cols - 1)));
}

@function calculateOffsetPercentage($cols) {
  @return calculateWidthPercentage($cols) + (gutterCalc()/2);
}

@mixin span-columns($cols) {
  float: left;
  width: calculateWidthPercentage($cols);
  margin-left: percentage(($default-gutter / $container-width) / 2);
  margin-right: percentage(($default-gutter / $container-width) / 2);
}

@mixin offset-columns($cols, $tc: $default-columns) {
  margin-left: calculateOffsetPercentage($cols) + (gutterCalc() / 2);
}

@mixin push($cols) {
  left: calculateOffsetPercentage($cols) + (gutterCalc() / 2);
}

@mixin pull($cols) {
  right: calculateOffsetPercentage($cols) + (gutterCalc() / 2);
}

@mixin reset-float() {
  float: none;
  display: block;
}

@mixin desktop() {
  @media screen and (min-width: $tablet-size){
    $current-total: $default-columns;
    $current-container-width: $container-width;
    $current-gutter: $gutter-width;

    $default-columns: $mobile-columns;
    $container-width: $container-width;
    $gutter-width: $default-gutter;

    @content;

    $default-columns: $current-total;
    $container-width: $current-container-width;
    $gutter-width: $current-gutter;
  }
}
@mixin tablet($size: max) {
  @media screen and (#{$size}-width: $tablet-size){
    $current-total: $default-columns;
    $current-container-width: $container-width;
    $current-gutter: $gutter-width;


    $default-columns: $tablet-columns;
    $container-width: $tablet-size;
    $gutter-width: $tablet-gutter;

    @content;

    $default-columns: $current-total;
    $container-width: $current-container-width;
    $gutter-width: $current-gutter;
  }
}
@mixin mobile($size: max) {
  @if $size != max {$mobile-size: $mobile-size;}
  @media screen and (#{$size}-width: $mobile-size){
    $current-total: $default-columns;
    $current-container-width: $container-width;
    $current-gutter: $gutter-width;

    $default-columns: $mobile-columns;
    $container-width: $mobile-size;
    $gutter-width: $mobile-gutter;

    @content;

    $default-columns: $current-total;
    $container-width: $current-container-width;
    $gutter-width: $current-gutter;
  }
}

@mixin breakpoint($pixelValue) {
  @media screen and (max-width: $pixelValue) {
    @content;
  }
}

// ---- CSS3 SASS MIXINS ----
// https://github.com/madr/css3-sass-mixins
//  
//  Copyright (C) 2011 by Anders Ytterstr√∂m
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
@mixin background-size ($value) {
  -webkit-background-size: $value;
          background-size: $value;
}

@mixin border-image ($path, $offsets, $repeats) {
     -moz-border-image: $path $offsets $repeats;
       -o-border-image: $path $offsets $repeats;
  -webkit-border-image: $path $offsets $repeats;
          border-image: $path $offsets $repeats;
}

@mixin border-radius ($values) {
       -o-border-radius: $values;
      -ms-border-radius: $values;
     -moz-border-radius: $values;
  -webkit-border-radius: $values;
          border-radius: $values;
   -moz-background-clip: padding; 
-webkit-background-clip: padding-box; 
        background-clip: padding-box;
}

@mixin text-shadow ($x, $y, $offset, $hex, $ie: $useIEFilters, $inset: null, $spread:null) {
     -moz-text-shadow: $x $y $offset $spread $hex $inset;
  -webkit-text-shadow: $x $y $offset $spread $hex $inset;
          text-shadow: $x $y $offset $spread $hex $inset;
  
  @if $ie == 1 {
    $iecolor: '#' + red($hex) + green($hex) + blue($hex);
    filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=#{$x}, OffY=#{$y}, Color='#{$iecolor}');
    -ms-filter: quote(progid:DXImageTransform.Microsoft.dropshadow(OffX=#{$x}, OffY=#{$y}, Color='#{$iecolor}'));
  }
}

@mixin box-shadow ($x, $y, $offset, $hex, $ie: $useIEFilters, $inset: null, $spread:null) {
     -moz-box-shadow: $x $y $offset $spread $hex $inset;
  -webkit-box-shadow: $x $y $offset $spread $hex $inset;
          box-shadow: $x $y $offset $spread $hex $inset;
  
  @if $ie == 1 {
    $iecolor: '#' + red($hex) + green($hex) + blue($hex);
    filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=#{$x}, OffY=#{$y}, Color='#{$iecolor}');
    -ms-filter: quote(progid:DXImageTransform.Microsoft.dropshadow(OffX=#{$x}, OffY=#{$y}, Color='#{$iecolor}'));
  }
}

@mixin box-sizing($value) {
    -moz-box-sizing: $value;
    -webkit-box-sizing: $value;
    box-sizing: $value;
}

@mixin linear-gradient($from, $to, $ie: $useIEFilters) {
  @if $ie != 1 { background-color: $to; }
  
  background-image: -webkit-gradient(linear,left top,left bottom,color-stop(0, $from),color-stop(1, $to));
  background-image: -webkit-linear-gradient(top, $from, $to);
  background-image: -moz-linear-gradient(top, $from, $to);
  background-image: -ms-linear-gradient(top, $from, $to);
  background-image: -o-linear-gradient(top, $from, $to);
  background-image: linear-gradient(top, bottom, $from, $to);

  @if $ie == 1 { 
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
    -ms-filter: quote(progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}'));
  }
}

@mixin rgba-bg ($hex, $alpha, $ie: $useIEFilters) {     
  @if $ie == 1 { 
    background-color: none;
    $hexopac: ie-hex-str(rgba($hex, $alpha));
        filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$hexopac}',EndColorStr='#{$hexopac}}');
    -ms-filter: quote(progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$hexopac}',EndColorStr='#{$hexopac}'));
  }
  @else {
    background-color: $hex;
    background-color: rgba($hex, $alpha);
  }
}

@mixin perspective($perspective) {
     -moz-perspective: $perspective;
      -ms-perspective: $perspective;
  -webkit-perspective: $perspective;
          perspective: $perspective;
     -moz-transform-style: preserve-3d;
      -ms-transform-style: preserve-3d;
  -webkit-transform-style: preserve-3d;
          transform-style: preserve-3d;
}

@mixin transform ($transforms) {
     -moz-transform: $transforms;
       -o-transform: $transforms;
      -ms-transform: $transforms;
  -webkit-transform: $transforms;
          transform: $transforms;
}

    @mixin matrix ($a, $b, $c, $d, $e, $f) {
         -moz-transform: matrix($a, $b, $c, $d, #{$e}px, #{$f}px);
           -o-transform: matrix($a, $b, $c, $d, $e, $f);
          -ms-transform: matrix($a, $b, $c, $d, $e, $f);
      -webkit-transform: matrix($a, $b, $c, $d, $e, $f);
              transform: matrix($a, $b, $c, $d, $e, $f);
    }

    @mixin rotate ($deg) {
      @include transform(rotate(#{$deg}deg));
    }

    @mixin scale ($size) {
      @include transform(scale(#{$size}));
    }

    @mixin translate ($x, $y) {
      @include transform(translate($x, $y));
    }

@mixin transition ($value) {
     -moz-transition: $value;
       -o-transition: $value;
      -ms-transition: $value;
  -webkit-transition: $value;
          transition: $value;
}
@mixin grid-background () {
  background-image: -webkit-linear-gradient(
    unquote(gridding($grid-color, $default-columns))
  );
}
// CSS3 SASS MIXINS 
//---------------------------------------------------------------------
@mixin information_box() {
  background-color:$grid_d4;
  border:1px solid $grid_d2;
  color:$grid_e2;
  padding:20px 30px;
  @include border-radius(10px);

  h3 { color:$grid_e2 !important; text-transform:none !important; }
  h3, h4 { border:0; color:$grid_e1; font-family:$_alpin; font-weight:normal; text-transform:uppercase; }
  p  { padding:0; margin:0; }
}

//---------------------------------------------------------------------
// The fancy screenshots
//---------------------------------------------------------------------
@mixin screenshot($_size: small, $_width: 340px, $_height: 230px, $_align: right) {
  position:relative;
  overflow:none;
  width:$_width;
  height:$_height;

  span, a {
    display:block;
    width:$_width;
    height:$_height;
    position:absolute;
    top:0;
    left:0;
    z-index:99;
    text-indent:-999em;
  }
  span {
    background:transparent url("/images/screenshots/screenshot_overlay_#{$_size}.png") top left no-repeat;
  }
  a {
    background:transparent url("/images/screenshots/screenshot_overlay_click_#{$_size}.png") top left no-repeat;
    &:hover { background-position:bottom left; }
  }
}

@mixin clearfix() {
  content: "\0020";
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}
